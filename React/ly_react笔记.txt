

3、匿名函数：【onChange={(v) => { this.onChange(v, record) }}】

4、单选框
    <RadioGroup name="makeUpExam11" value={this.state.makeUpExam1} selectedValue={this.state.makeUpExam1} 【onChange={(event) => { this.setState({ makeUpExam1: event.target.value }) }}】>
      补考通过最终成绩是否显示60分
      <Radio value="1">是</Radio>
      <Radio value="0">否</Radio>
    </RadioGroup>
    
5、预览PDF文件：【 npm install react-pdf-js 】

6、对象转换：
JSON.stringify(printDatas); //json对象转json字符串
JSON.parse(); //json字符串转json对象

section.events.push(datas); 

7、时间格式化显示：new Date(Date.parse(${dataSource[i].events[0].timesStartTime}.replace(/-/g, "/"))).format('hh:mm'))

8、查询所有节次
to_char(JCSZ.KSSJ,'hh:mi') as KSSJ,
        to_char(JCSZ.JSSJ,'hh:mi') as JSSJ,

9、排序：
  const newSingleSchudle = JSON.parse(JSON.stringify(singleSchedule)).sort(
    (a, b) => {
      // 以time为主排序，key为次排序
      if (a.time === b.time) {
        return a.key - b.key;
      } else {
        return a.time - b.time;
      }
    }
  );
  
10、在显示里修改逻辑
      {
        title: "在校状态",
        dataIndex: "sudentStatus",
        key: "sudentStatus",
        align: "center",
        width: 100,
        render: (text) => {
          let state = '';
          if (text == "1") {
            state = "在校";
          } else {
            state = "不在校";
          }
          return <div>{state}</div>
        }
      }

11、提示框：【message.error("请选中数据");】


12、引入公共代码接口：【import { selectDepartment } from "../../../../../config/commonService";】

按钮控件：<Button type="primary" onClick={this.batchDelete} ghost> 取消订购  </Button>

13、遍历数组：
  _this.state.selectedRows.map((item, i) => {
       let status = item.orderStatus;
       if (status != 0 && status != 1) {
           cnt++;
       }
   })

debugger

14、组件如果有default，则引用时不需要{}

15、子组件传值给父组件：{/* 获取子table的数据 */}
  1)、表单形式获取子组件值：【<SupplierInfo wrappedComponentRef={(inst) => (this.supplierInfo = inst)} />】
  2)、不是表单形式获取子组件值：【<SupplierInfo ref={(ref)=>{this.supplierInfo=ref}} />】
  父组件可以这样使用子组件传来的参数：【const supplierIds = this.supplierInfo.state.selectedRowKeys;】

16、父组件传值给子组件：【record={this.state.record}】，子组件中通过【this.props.record】来获取
  <ClassBooksModal ref="showClassOrderBooksModal"
      setChild={this.setChild}
      record={this.state.record}
  />

17、注意：前台传值到后台，参数列表格式需要特别注意。大括号，等等

18、【提示框确认操作】,在提示确认框中需要用【let _this = this;】，如下
  approvalBooks = () => {
      let _this = this;
      confirm({
          title: '提示',
          content: '确认要提交吗？',
          onOk() {
              let _data = {
                  "orderNumberList": _this.state.selectedRowKeys,
                  "approvalStatus": 2,//修改审批状态,直接通过
                  "teachingClassNumber": _this.props.record.teachingClassNumber
              }
              updateOrderBook(_data, "orderBook:update", () => {
                  _this.indexQuery();
              });
          }
      });
  };

19、传递参数的方式：前端传参，入参
  1)、
  const params = {
      'teachingClassNumberList': this.state.selectedRowKeys,
      'isbnList': isbnList,
      'appendOrder': appendOrder
  };
  
  2)、
  const params = {
      teachingClassNumberList: this.state.selectedRowKeys,
      isbnList: isbnList,
      appendOrder: appendOrder
  };
  
  3)、
  let _params = {
      ...this.params,
      param:{
          useable:1
      }
  };
  
  4)、
  let _params = {
      ...this.params,
      ...params,
      param: {
          teachingClassNumber: this.props.record.teachingClassNumber
      }
  };
  
20、在表格行中通过render 返回自定义东西

21、将新的属性添加到record中：【record.studentOrderCnt = value.target.value;】
  //【教师征订人数】回调函数
  studentOrderCntOnChange = (value, record, index) => {
      record.studentOrderCnt = value.target.value
      let dataSource = this.state.dataSource
      dataSource[index] = value.target.value
      this.setState({ dataSource: dataSource })

  }
  
  {
    title: '请确认学生征订人数',
    dataIndex: 'studentOrderCnt',
    key: 'studentOrderCnt',
    align: 'center',
    width: 100,
    render: (text, record, index) => {
        return <Input
            onChange={(v) => { this.studentOrderCntOnChange(v, record, index) }}
            defaultValue={this.props.classRecord.classCnt}
            rows={1}
        />
    }
  },

22、批量修改保存【dataSource[index].returnNotice = value.target.value;】
  returnNoticeOnChange = (value, record, index) => {
      let _data = {
          "orderNumber": record.orderNumber,
          "returnNotice": value.target.value,//回告
          "approvalStatus": 4,
      }
      let dataSource = this.state.dataSource;
      dataSource[index].returnNotice = value.target.value;
      this.setState({
          dataSource: dataSource
      });
  }
  
  
23、模态框传递数据 参数
  <ClassBooksModal ref="showClassOrderBooksModal"
      setChild={this.setChild}
      codeList={this.state.selectedRowKeys}
      record={this.state.record}
  />
  
  codeList: this.props.codeList
  
  form表单传参
  <AddModal  wrappedComponentRef={(inst) => (this.addModal = inst)} />

24、设置表格行联合主键
  rowKey: (record) => { return JSON.stringify({ teachingClassNumber: record.teachingClassNumber, classCode: record.classCode }) },

25、列宽设置：
const sumWidth = TableUtil.calculateColumsWidthSum(columns, 0);
scroll: { x: sumWidth },

26、设置样式：【style={{height:35.016}}】，【style={{ width: "100%" }}】


27、判空：【
        if (typeof remark != "undefined" && remark != null && remark.replace(/(^s*)|(s*$)/g, "").length != 0) {
          disabled = true
        }
      】

28、传id查详情：【isExtraQuery: id => `${base}/studentExtraScore/queryIsExtraData?studentExtraScoreId=${id}`】 // 查询是否为额外成绩表数据

29、查询模态框：
    // 查询
    onSearch = () => {
        this.props.form.validateFields((err, values) => {
            if (!err) {
                //this.props.onSearch({ param: values });
				//this.props.onSearch({ ...values });
            }
        });
    };

30、数组元素操作：
  删除：list.splice(index, 1)
  添加：list.push(newState.inputValue)  //push新的内容到列表中去

31、刷新主表数据
<AddModal ref="addModal" onSearch={this.indexQuery} reload={this.reload} enterWareNumber={this.state.enterWareNumber}/>

32、创建map集合并往里边加值
  let applyMap = {}
  this.state.selectedRows.map((item) => {
      applyMap[item.applyId] = item.studentId
  })
  
33、添加默认过滤条件
// 查询参数
    params = {
        pageNo: 1,
        pageSize: 20,
        total: 0,
        param: { approvalStatus: '' }
    }
    //表单查询
    indexQuery = params => {
        if (this.props.queryType == '1') {
            this.params.param.approvalStatus = '1' //待审批
        } else if (this.props.queryType == '2') {
            this.params.param.approvalStatus = "9"; //已审批
        }
        let _params = {
            ...this.params,
            ...params
        }
        this.setState({
            loading: true
        })
        query(_params, authority.query, (data) => {
           
        })
    }

列隐藏：
ellipsis: true,

