
1、架构的分类

  1)、业务架构：从概念层面帮助开发人员更好的理解系统，比如业务流程、业务模块、输入输出、业务域。
  
  2)、应用架构：从逻辑层面帮助开发落地系统，如数据交互关系、应用形式、交互方式，是的整个系统逻辑上更容易理解，步入大家熟知的 SOA 就属于应用架构的范畴。
  
  3)、技术架构：主要解决技术平台选型、如操作系统、中间件、设备、多机房、水平扩展、高可用等问题。
  
2、注意：系统或者架构首先都是为人服务的，系统的有序度高，使用逻辑合理，业务概念清晰是第一位。现在大家讨论更多的是技术架构，如高并发设计，分布式事务处理等，只是因为这个不需要业务上下文背景，比较好相互沟通。具体架构设计时，首先要关注业务架构和应用架构，这个架构新手要特别注意。也是面试时候的痛点！

3、演进过程：

  1)、单台机器部署(应用和数据库在同台机器) --》
  
  2)、数据库与应用分离(应用和数据库在不同台机器) --》为什么这么分呢？
  从计算机本身的角度来考虑的话，一个请求的访问到处理最终到返回，性能瓶颈只会是：CPU、文件 IO、网络 IO、内存、等因素。而一台计算机中这些纬度是有性能瓶颈的，如果某个资源消耗过多，通常会造成系统的响应速度较慢，所以增加一台机器，使得数据库的 IO 和 CPU 资源独占一台机器从而增加性能。

  3)、集群分布式部署(针对性水平扩容)
  
  
====== CPU/IO/内存 ======

1、CPU上下文的切换：因为每个 CPU 核心在同一时刻只能执行一个线程，而 CPU 的调度有几种方式，比如抢占式和轮询等，以抢占式为例，每个线程会分配一定的执行时间，当达到执行时间、线程中有 IO 阻塞或者有高优先级的线程要执行时。CPU 会切换执行其他线程。而在切换的过程中，需要存储当前线程的执行状态并恢复要执行的线程状态，这个过程就是上下文切换。比如 IO、锁等待等场景下也会触发上下文切换，当上下文切换过多时会造成内核占用比较多的 CPU。

2、文件IO：比如频繁的日志写入，磁盘本身的处理速度较慢、都会造成 IO 性能问题。

3、网络IO：带宽不够。

4、内存：包括内存溢出、内存泄漏、内存不足。





















  