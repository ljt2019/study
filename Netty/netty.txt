

====== netty 预设前置实战案例 ======

1、Netty 基本上是作为架构的技术底层而存在的，主要完成高性能的网络通信。RPC框架的底层通信就是用的Netty

2、目前流行的 RPC 服务治理框架主要有 Dubbo 和 Spring Cloud，下面我们以比较经典的 Dubbo 为例。Dubbo 核心模块主要有四个：Registry 注册中心、Provider 服务端、Consumer 消费端、Monitor 监控中心。

3、主要模块包括：

  1)、api：主要用来定义对外开放的功能与服务接口。
  
  2)、protocol：主要定义自定义传输协议的内容。
  
  3)、registry：主要负责保存所有可用的服务名称和服务地址。
  
  4)、provider：实现对外提供的所有服务的具体功能。
  
  5)、consumer：客户端调用。
  
  6)、monitor：完成调用链监控。
  
4、在 Netty 中要完成一个自定义协议，远程调用 Java 代码哪些内容是必须由网络来传输的呢？
  1.服务名称
  2.需要调用该服务的哪个方法
  3.方法的实参

5、梳理一下基本的实现思路，主要完成一个这样的功能：API 模块中的接口功能在服务端实现（并没有在客户端实现）。因此，客户端调用 API 中定义的某一个接口方法时，实际上是要发起一次网络请求去调用服务端的某一个服务。而这个网络请求首先被注册中心接收，由注册中心先确定需要调用的服务的位置，再将请求转发至真实的服务实现，最终调用服务端代码，将返回值通过网络传输给客户端。整个过程对于客户端而言是完全无感知的，就像调用本地方法一样。


====== 传统RPC框架性能差的原因 ======

1、阻塞IO不具备弹性伸缩能力，高并发导致宕机。

2、Java序列化编解码性能问题。

3、传统IO线程模型过多占用CPU资源。

4、Netty合理处理 IO(传输)、协议、线程模型之间的关系，使得高性能成为可能。


====== 高性能的三个主题 ======

1、IO模型：用什么样的通道将数据传输发送给对方(BIO、NIO、AIO)，IO模型很大程度上决定了框架的性能。

2、数据协议：http或者内部私有协议。协议不同，性能模型也不同，相比于共有协议，内部私有协议的性能通常可以被设计的更优。

3、线程模型：数据报如何读取？读取之后编解码在哪个线程进行，编解码的消息如何派发，Reactor线程模型的不同，对性能的影响也非常大。


====== 异步非阻塞通信 ======

1、NioEventLoop 聚合多路复用器 Selector，可以同时并发处理成百上千个客户端Channel，由于读写操作都是非阻塞的，这就可以充分发挥提升IO线程的运算效率，避免由于频繁IO阻塞导致的线程挂起。


====== 零拷贝 ======

1、接收和发送 ByteBuffer 使用堆外内存进行 Socket 读写。

2、提供组合 Buffer 对象，可以聚合多个 ByteBuffer 对象。

3、transferTo()直接将文件缓冲区的数据发送到目标Channel。


====== 内存池 ======

1、Pooled 与 UnPooled (池化与非池化)

2、UnSafe和非UnSafe（底层读写与应用程序读写）

3、Heap和Direct（堆内存与堆外内存）


====== 高效的Reactor线程模型 ======

1、Reactor单线程模型。

2、Reactor多线程模型。

3、主从Reactor多线程模型。


====== 高效的并发编程 ======

1、volatile的大量、正确使用;

2、CAS和原子类的广泛使用；

3、线程安全容器的使用；

4、通过读写锁提升并发性能。


====== 高性能的序列化框架 ======

1、序列化后的码流大小（网络带宽的占用）；

2、序列化&反序列化的性能（CPU资源占用）；

3、是否支持跨语言（异构系统的对接和开发语言切换）。


====== 灵活的TCP参数配置能力 ======



====== Netty核心组件之Channel启动 ======

1、newChannel();创建Channel对象：服务端Channel的创建

  1)、bind()[用户代码入口]
  2)、initAndRegister()[初始化并注册]
  3)、newChannel()[创建服务端channel]
    反射创建服务端Channel

  4)、init()[初始化服务端Channel]
  
2、init();初始化预设参数；

3、doBind();绑定端口；

4、register();注册到Selector。





































































