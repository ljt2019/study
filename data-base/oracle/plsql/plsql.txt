
1、PL/SQL块的基本结构
  DECLARE
  	/**
  	 * 声明部分，声明变量、常量、复杂数据类型、游标等
  	 */
  BEGIN
  	/**
  	 * 执行部分，PL/SQL语句和SQL语句
  	 */
  EXCEPTION
  	/**
  	 * 异常处理部分，处理运行错误
  	 */
  END; --块结束标记
  
2、PL/SQL块的分类
  1)、匿名块：动态构造、只能执行一次
  2)、子程序：存储在数据库中的存储过程、函数及包等。当在数据库上建立好后可以在其他程序中调用他们。
  3)、触发器：当数据发生操作时，会触发一些事件，从而自动执行相应的程序。
  
3、变量的命名方法
  1)、程序变量：v_name
  2)、程序常量：c_name
  3)、游标变量：name_cursor
  4)、异常标识：e_name_error
  5)、记录类型：name_record【emp_record】
  
4、变量类型
  1)、数值类型：NUMBER(P,S)以及子类型INT、FLOAT等
  2)、字符类型：CHAER(n)、VARCHAR2(n)
  3)、日期类型：DATE
  4)、布尔类型：BOOLEAN
  
5、变量的大小写规则
  1)、SQL关键字采用大写，如:SELECT,UPDATE等
  2)、PL/SQL关键字采用大写格式，如：DECLARE,BEGIN,END等
  3)、数据类型采用大写格式：，如：INT、DATE等
  4)、标识符和参数采用小写格式：，如：v_sal等
  5)、数据库对象和列采用小写格式，如：emp(表名),sal(列字段名)等

6、引用型变量和记录型变量
  1)、为什么要使用他们？？：在许多情况下，PL/SQL变量可以用来存储在数据表中的数据，在这种情况下，变量应该拥有与表列相同的类型。这种情况下建议使用引用型变量(使用%TYPE)或记录型变量(使用%ROWTYPE)而不是将变量类型硬性编码
  2)、引用型变量：是指其数据类型与已经定义的某个数据变量类型相同，或与数据库表某个列的数据类型相同。例如：v_name emp.ename%TYPE;
  3)、记录类型变量：PL/SQL提供%ROWTYPE操作符，返回一个记录类型，其数据类型和数据库表的数据结构相一致。例如：emp_record emp%ROWTYPE;
  4)、记录型变量分量的引用：emp_record.ename := 'ROSE'
  
7、循环语句：
--基本循环
declare
  v_cnt int := 1;
begin
  loop
    dbms_output.put_line(v_cnt);
    exit when v_cnt = 110;
    v_cnt := v_cnt + 1;
  end loop;
end;

--while循环
declare
  v_cnt int := 1;
begin
  while v_cnt <= 20 loop
    dbms_output.put_line(v_cnt);
    v_cnt := v_cnt + 1;
  end loop;
end;

--for循环,reverse可以反向循环
begin
  for i in 1 .. 10 loop
    dbms_output.put_line(i);
  end loop;
end;

--嵌套循环
declare
  v_result int;
begin
  <<outter>>
  for i in 1 .. 5 loop
    <<inter>>
    for j in 1 .. 5 loop
      v_result := i;
      exit outter when i = 4;
    end loop inter;
    dbms_output.put_line('内结束，' || v_result);
  end loop outter;
  dbms_output.put_line('外结束，' || v_result);
end;

--continue,跳出当前循环
declare
  v_cnt int := 0;
begin
  loop
    v_cnt := v_cnt + 1;
    continue when v_cnt = 5;
    dbms_output.put_line(v_cnt);
    exit when v_cnt = 10;
  end loop;
end;

8、goto语句：用于跳到特定标号处执行语句
  1)、语法格式：【goto label_name】
  2)、注意：当使用goto语句时，标号后边至少需要包含一条执行语句。
declare
  v_cnt int := 1;
begin
  loop
    dbms_output.put_line(v_cnt);
    if v_cnt = 10 then
      --exit;
      goto end_loop;
    end if;
    v_cnt := v_cnt + 1;
  end loop;
  <<end_loop>>
  dbms_output.put_line('跳出循环');
end;

9、游标：sql的一个内存工作区，由系统或以变量的形式定义。通俗来说就是一个结果集。
  1)、显示游标：
  定义游标：【cursor cursor_name[(paramter_name datatype)] is seelct_statment;】
  打开游标：【open cursor_name】
  提取数据：【fetch cursor_name into var1[,var2,...]】,每次只能提取一行
  关闭游标：【close cursor_name】
  2)、游标的属性：
  %found：检测游标结果集是否存在数据，存在则返回true
  %notfound：结果集不存在数据，则返回true
  %isopen：检测是否打开，打开返回true
  %rowcount：返回实际提取的行数
  
declare
  --定义游标
  cursor emp_cursor is
    select emp.empno, emp.ename, emp.job from emp;
  v_empno emp.empno%type;
  v_ename emp.ename%type;
  v_job   emp.job%type;
begin
  --打开游标
  open emp_cursor;
  --提取数据
  loop
    fetch emp_cursor
      into v_empno, v_ename, v_job;
    dbms_output.put_line('员工编号：' || v_empno || ';员工姓名' || v_ename ||
                         ';员工职位：' || v_job);
    exit when emp_cursor%notfound;
  end loop;
  close emp_cursor;
end;

